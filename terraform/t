#!/bin/bash

ENV=$1
if [ -z $ENV ] ; then
  echo "need to provide environment name"
  exit 1
fi

# echo "Using $ENV" >&2

shift
COMPONENT=$1
if [ -z $COMPONENT ] ; then
  echo "need to provide component name"
  exit 1
fi


shift
TF_COMMAND="$1"
if [ -z "$TF_COMMAND" ] ; then
  echo "need to provide component terraform command"
  exit 1
fi
shift

ARGS=

COMPONENT_PATH=components/$COMPONENT


pushd $COMPONENT_PATH >&2
rm -rf .state
mkdir -p .state
function initialize() {
 terraform init --reconfigure -backend=true \
   -backend-config=bucket=vvv-$ENV-state\
   -backend-config=key=$COMPONENT/terraform.tfstate \
   -backend-config=region=eu-west-2 \
   -get-plugins=true
}

case $TF_COMMAND in
init)
  initialize
;;
plan)
  initialize
  terraform $TF_COMMAND -var vvv_env=$ENV "$@"
;;
taint)
  initialize
  terraform $TF_COMMAND "$@"
;;
output)
  terraform $TF_COMMAND -json "$@" | jq 'to_entries | map({key: .key, value: .value.value}) | from_entries' -r > ${OUTPUT_PATH}
;;
destroy)
  initialize
  terraform $TF_COMMAND -var vvv_env=$ENV "$@"
;;
apply)
  initialize
  terraform $TF_COMMAND -var vvv_env=$ENV -auto-approve "$@"
;;
state)
  terraform $TF_COMMAND "$@"
;;
validate)
  initialize
  terraform $TF_COMMAND -var vvv_env=$ENV "$@"
;;
console)
  terraform $TF_COMMAND "$@"
;;
0.12upgrade)
  terraform $TF_COMMAND "$@"
;;
version)
  terraform $TF_COMMAND "$@"
;;
esac

exit_code=$?

exit $exit_code
